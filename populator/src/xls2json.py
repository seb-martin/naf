#!/usr/bin/python# -*- coding: utf-8 -*-import sysimport xlrdimport codecsimport jsonimport urllib2def parse(file_input, skip_line=0, key_indexes=None):    # ouverture du fichier Excel    if not key_indexes:        key_indexes = []    wb = xlrd.open_workbook(file_input)    # lecture des donnees dans la premiere feuille    sh = wb.sheet_by_index(0)    # les skip_line premieres lignes contiennent des informations non interessantes    # la troisieme ligne contient le nom des proprietes    propertyNames = sh.row_values(skip_line)    # le reste des lignes contient les donnees    datas = []    for rownum in range(skip_line + 1, sh.nrows):        propertyValues = sh.row_values(rownum)        dataDict = {}        for i in range(len(propertyNames)):            dataDict[propertyNames[i]] = propertyValues[i]            pass        if key_indexes:            _id = ''            for kid in key_indexes:                _id += str(propertyValues[kid])                pass            dataDict['_id'] = _id            pass        datas.append(dataDict)        pass    return datas    passdef dump(datas, file_output):    f = codecs.open(file_output, encoding='UTF-8', mode='w')    dump = json.dumps(datas)    f.write(dump)    f.close()    return dump    passdef load_config(config_file):    return json.load(codecs.open(config_file, encoding='UTF-8', mode='r'))    passdef download_data(url, file_name):    print "Download", url, "-->", file_name    u = urllib2.urlopen(url)    localFile = open(file_name, 'w')    localFile.write(u.read())    localFile.close()    passif __name__ == '__main__':    config_file = 'naf.json'    # Interpréter les arguments    if len(sys.argv) > 1:        # Un fichier de config est spécifié        config_file = sys.argv[1]        pass    # Charger la configuration    config = load_config(config_file)    for collectionName, collectionProperties in config.iteritems():        xls_file = collectionName + '.xls'        json_file = collectionName + '.json'        # Télécharger le classeur Excel des données        download_data(collectionProperties['url'], xls_file)        # Transformer le classeur en un document JSON        dump(parse(xls_file, collectionProperties['skiplines'], collectionProperties['key_idxs']), json_file)        pass